var bstack: stack<bit8>
var btemploop: []bit8
var bcurrent: int
var bcode: []char

func main()
    do @greet()
    do @listen()
end func

func greet()
    do cui@print("\nWelcome to Brainstack interpreter!\n")
    do cui@print("Type \"quit\" to quit\n")
    do @bstack :: #stack<bit8>
    do @btemploop :: #[2]bit8
    do @bcurrent :: 0
end func

func listen()
    while wait(true)
        do cui@print("\nbsi: ")
        do @bcode :: cui@input()
        if(@bcode = "quit")
            do cui@print("Bye!\n\n")
            break wait
        end if
        do parse(@bcode)
    end while
    func parse(bcode: []char)
        for i(0, ^bcode - 1)
            switch(bcode[i])
            case '+'
                do @btemploop[@bcurrent] :+ 1b8
            case '-'
                do @btemploop[@bcurrent] :- 1b8
            case '.'
                do @bstack.add(@btemploop[0])
            case ','
                do @btemploop[0] :: @bstack.get()
            case '*'
                do @btemploop[0] :: 0b8
            case '>'
                do @bcurrent :: (@bcurrent + 1) % 2
            case '['
                if(@btemploop[1] = 0b8)
                    while(bcode[i] <> ']')
                        do i :+ 1
                    end while
                end if
            case ']'
                while(bcode[i] <> '[')
                    do i :- 1
                end while
                do i :- 1
            case 'p'
                do cui@print("\{@btemploop[@bcurrent] $ int $ char}\n")
            case 'r'
                var casted: bool
                do cui@print("-input: ")
                do @btemploop[@bcurrent] :: cui@input().toInt(&casted) $ bit8
            end switch
        end for
    end func
end func
